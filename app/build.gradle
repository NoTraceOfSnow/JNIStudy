apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'android-aspectjx'

android {
    compileSdkVersion Versions.compileSdkVersion
    buildToolsVersion Versions.buildToolsVersion
    defaultConfig {
        applicationId "com.testndk.jnistudy"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
                abiFilters "armeabi-v7a" //指定目标生成so(该过滤只会影响自己写的lib的生成,生成apk中只会生成指定so,但不会删除原有的第三方so)
            }
        }
        ndk {
            abiFilters("armeabi-v7a")//过滤第三方so库(该过滤会影响到第三方so,让生成的apk中只存在指定过滤so库)
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation "io.reactivex.rxjava2:rxjava:2.2.7"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"
    implementation "com.jakewharton.rxbinding2:rxbinding:2.1.1"
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation Commons.fastJson
    implementation Commons.viewpager2
    implementation Commons.base_recycler_view_adapter_helper
    implementation ImageBrowser.subScaleImg
    implementation ImageBrowser.photoView
    implementation ImageLibs.glide
    testImplementation TestModel.junit
    //aspect
    implementation 'org.aspectj:aspectjrt:1.8.13'
}


//
//// 下面都是 AspectJ导入的过程
//// AspectJ 还需要依赖 3
//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
//
//final def log = project.logger
//final def variants = project.android.applicationVariants
//
//variants.all { variant ->
//
//    if (!variant.buildType.isDebuggable()) {
//        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
//        return;
//    }
//
//    JavaCompile javaCompile = variant.javaCompile
//
//    javaCompile.doLast {
//
//        String[] args = ["-showWeaveInfo",
//
//                         "-1.8",
//
//                         "-inpath", javaCompile.destinationDir.toString(),
//
//                         "-aspectpath", javaCompile.classpath.asPath,
//
//                         "-d", javaCompile.destinationDir.toString(),
//
//                         "-classpath", javaCompile.classpath.asPath,
//
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true);
//
//        new Main().run(args, handler);
//
//        for (IMessage message : handler.getMessages(null, true)) {
//
//            switch (message.getKind()) {
//
//                case IMessage.ABORT:
//
//                case IMessage.ERROR:
//
//                case IMessage.FAIL:
//
//                    log.error message.message, message.thrown
//
//                    break;
//
//                case IMessage.WARNING:
//
//                    log.warn message.message, message.thrown
//
//                    break;
//
//                case IMessage.INFO:
//
//                    log.info message.message, message.thrown
//
//                    break;
//
//                case IMessage.DEBUG:
//
//                    log.debug message.message, message.thrown
//
//                    break;
//            }
//        }
//    }
//}

